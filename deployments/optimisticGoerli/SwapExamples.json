{
  "address": "0x4Dd8D66382F63Fd9C54B659615d908de962F10B6",
  "abi": [
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "approveSwapRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "approveThis",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolFee",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenBAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "WETHAddress",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        }
      ],
      "name": "setPoolVariables",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "swapRouterAddress",
          "type": "address"
        }
      ],
      "name": "setSwapRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "swapExactInputMultihop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "swapExactInputSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMaximum",
          "type": "uint256"
        }
      ],
      "name": "swapExactOutputMultihop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMaximum",
          "type": "uint256"
        }
      ],
      "name": "swapExactOutputSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenA",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "transferIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3e3b47d37ccb8bc640ffda585c8d9884b02b799ce9ba411b1d897e011ac3cf4a",
  "receipt": {
    "to": null,
    "from": "0x0344A0C345ed14AfB1f2Ff6aDc62e7fFa64338fb",
    "contractAddress": "0x4Dd8D66382F63Fd9C54B659615d908de962F10B6",
    "transactionIndex": 0,
    "gasUsed": "802404",
    "logsBloom": "0x
    "blockHash": "0x7249a86a32ff9fc8ace7f8c7c2bfaf97a76d621eb080f4b9e1d236aae901d41b",
    "transactionHash": "0x3e3b47d37ccb8bc640ffda585c8d9884b02b799ce9ba411b1d897e011ac3cf4a",
    "logs": [],
    "blockNumber": 2155799,
    "cumulativeGasUsed": "802404",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "b29de8f8bfcdd63463975e20594c684f",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"approveSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"approveThis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenBAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"WETHAddress\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"setPoolVariables\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapRouterAddress\",\"type\":\"address\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"swapExactInputMultihop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"swapExactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"name\":\"swapExactOutputMultihop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"name\":\"swapExactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"transferIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"swapExactInputMultihop(uint256)\":{\"details\":\"The calling address must approve this contract to spend at least `amountIn` worth of its tokenA for this function to succeed.\",\"params\":{\"amountIn\":\"The amount of tokenA to be swapped.\"},\"returns\":{\"amountOut\":\"The amount of tokenB received after the swap.\"}},\"swapExactInputSingle(uint256)\":{\"details\":\"The calling address must approve this contract to spend at least `amountIn` worth of its tokenA for this function to succeed.\",\"params\":{\"amountIn\":\"The exact amount of tokenA that will be swapped for WETH9.\"},\"returns\":{\"amountOut\":\"The amount of tokenB received.\"}},\"swapExactOutputMultihop(uint256,uint256)\":{\"details\":\"The calling address must approve this contract to spend its tokenA for this function to succeed. As the amount of input tokenA is variable, the calling address will need to approve for a slightly higher amount, anticipating some variance.\",\"params\":{\"amountInMaximum\":\"The maximum amount of tokenA willing to be swapped for the specified amountOut of tokenB.\",\"amountOut\":\"The desired amount of tokenB.\"},\"returns\":{\"amountIn\":\"The amountIn of tokenA actually spent to receive the desired amountOut.\"}},\"swapExactOutputSingle(uint256,uint256)\":{\"details\":\"The calling address must approve this contract to spend its tokenA for this function to succeed. As the amount of input tokenA is variable, the calling address will need to approve for a slightly higher amount, anticipating some variance.\",\"params\":{\"amountInMaximum\":\"The amount of tokenA we are willing to spend to receive the specified amount of tokenB.\",\"amountOut\":\"The exact amount of tokenB to receive from the swap.\"},\"returns\":{\"amountIn\":\"The amount of tokenA actually spent in the swap.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"swapExactInputMultihop(uint256)\":{\"notice\":\"swapInputMultiplePools swaps a fixed amount of tokenA for a maximum possible amount of tokenB through an intermediary pool. For this example, we will swap tokenA to WETH, then WETH to tokenB to achieve our desired output.\"},\"swapExactInputSingle(uint256)\":{\"notice\":\"swapExactInputSingle swaps a fixed amount of tokenA for a maximum possible amount of tokenB using the tokenA/tokenB fee pool by calling `exactInputSingle` in the swap router.\"},\"swapExactOutputMultihop(uint256,uint256)\":{\"notice\":\"swapExactOutputMultihop swaps a minimum possible amount of tokenA for a fixed amount of WETH through an intermediary pool. For this example, we want to swap tokenA for tokenB through a WETH pool but we specify the desired amountOut of tokenB. Notice how the path encoding is slightly different for exact output swaps.\"},\"swapExactOutputSingle(uint256,uint256)\":{\"notice\":\"swapExactOutputSingle swaps a minimum possible amount of tokenA for a fixed amount of tokenB.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapExamples.sol\":\"SwapExamples\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"contracts/SwapExamples.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./interfaces/ISwapRouter.sol\\\";\\n\\ncontract SwapExamples {\\n    // For the scope of these swap examples,\\n    // we will detail the design considerations when using\\n    // `exactInput`, `exactInputSingle`, `exactOutput`, and  `exactOutputSingle`.\\n\\n    // It should be noted that for the sake of simplicity, we purposefully pass in the swap router instead of inheriting the swap router in these examples.\\n    // More advanced example contracts will detail how to inherit the swap router safely.\\n\\n    ISwapRouter public swapRouter;\\n\\n    // This example swaps tokenA/WETH9 for single path swaps and tokenA/USDC/WETH9 for multipath swaps.\\n\\n    address public tokenA;\\n    address public tokenB;\\n    address public WETH;\\n\\n    uint24 public poolFee;\\n\\n    function setSwapRouter(address swapRouterAddress) public {\\n        swapRouter = ISwapRouter(swapRouterAddress);\\n    }\\n\\n    function setPoolVariables(\\n        address tokenAAddress,\\n        address tokenBAddress,\\n        address WETHAddress,\\n        uint24 fee\\n    ) public {\\n        tokenA = tokenAAddress;\\n        tokenB = tokenBAddress;\\n        WETH = WETHAddress;\\n        poolFee = fee;\\n    }\\n\\n    function transferIn(uint256 amountIn) public {\\n        // Transfer the specified amount of tokenA to this contract.\\n        TransferHelper.safeTransferFrom(\\n            tokenA,\\n            msg.sender,\\n            address(this),\\n            amountIn\\n        );\\n    }\\n\\n    function approveSwapRouter(uint256 amountIn) public {\\n        // Approve the router to spend tokenA.\\n        TransferHelper.safeApprove(tokenA, address(swapRouter), amountIn);\\n    }\\n\\n    function approveThis(uint256 amountIn) public {\\n        // Approve the router to spend tokenA.\\n        TransferHelper.safeApprove(tokenA, address(this), amountIn);\\n    }\\n\\n    /// @notice swapExactInputSingle swaps a fixed amount of tokenA for a maximum possible amount of tokenB\\n    /// using the tokenA/tokenB fee pool by calling `exactInputSingle` in the swap router.\\n    /// @dev The calling address must approve this contract to spend at least `amountIn` worth of its tokenA for this function to succeed.\\n    /// @param amountIn The exact amount of tokenA that will be swapped for WETH9.\\n    /// @return amountOut The amount of tokenB received.\\n    function swapExactInputSingle(uint256 amountIn)\\n        external\\n        returns (uint256 amountOut)\\n    {\\n        // Naively set amountOutMinimum to 0. In production, use an oracle or other data source to choose a safer value for amountOutMinimum.\\n        // We also set the sqrtPriceLimitx96 to be 0 to ensure we swap our exact input amount.\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter\\n            .ExactInputSingleParams({\\n                tokenIn: tokenA,\\n                tokenOut: tokenB,\\n                fee: poolFee,\\n                recipient: msg.sender,\\n                deadline: block.timestamp,\\n                amountIn: amountIn,\\n                amountOutMinimum: 0,\\n                sqrtPriceLimitX96: 0\\n            });\\n\\n        // The call to `exactInputSingle` executes the swap.\\n        amountOut = swapRouter.exactInputSingle(params);\\n    }\\n\\n    /// @notice swapExactOutputSingle swaps a minimum possible amount of tokenA for a fixed amount of tokenB.\\n    /// @dev The calling address must approve this contract to spend its tokenA for this function to succeed. As the amount of input tokenA is variable,\\n    /// the calling address will need to approve for a slightly higher amount, anticipating some variance.\\n    /// @param amountOut The exact amount of tokenB to receive from the swap.\\n    /// @param amountInMaximum The amount of tokenA we are willing to spend to receive the specified amount of tokenB.\\n    /// @return amountIn The amount of tokenA actually spent in the swap.\\n    function swapExactOutputSingle(uint256 amountOut, uint256 amountInMaximum)\\n        external\\n        returns (uint256 amountIn)\\n    {\\n        ISwapRouter.ExactOutputSingleParams memory params = ISwapRouter\\n            .ExactOutputSingleParams({\\n                tokenIn: tokenA,\\n                tokenOut: tokenB,\\n                fee: poolFee,\\n                recipient: msg.sender,\\n                deadline: block.timestamp,\\n                amountOut: amountOut,\\n                amountInMaximum: amountInMaximum,\\n                sqrtPriceLimitX96: 0\\n            });\\n\\n        // Executes the swap returning the amountIn needed to spend to receive the desired amountOut.\\n        amountIn = swapRouter.exactOutputSingle(params);\\n\\n        // For exact output swaps, the amountInMaximum may not have all been spent.\\n        // If the actual amount spent (amountIn) is less than the specified maximum amount, we must refund the msg.sender and approve the swapRouter to spend 0.\\n        if (amountIn < amountInMaximum) {\\n            TransferHelper.safeApprove(tokenA, address(swapRouter), 0);\\n            TransferHelper.safeTransfer(\\n                tokenA,\\n                msg.sender,\\n                amountInMaximum - amountIn\\n            );\\n        }\\n    }\\n\\n    /// @notice swapInputMultiplePools swaps a fixed amount of tokenA for a maximum possible amount of tokenB through an intermediary pool.\\n    /// For this example, we will swap tokenA to WETH, then WETH to tokenB to achieve our desired output.\\n    /// @dev The calling address must approve this contract to spend at least `amountIn` worth of its tokenA for this function to succeed.\\n    /// @param amountIn The amount of tokenA to be swapped.\\n    /// @return amountOut The amount of tokenB received after the swap.\\n    function swapExactInputMultihop(uint256 amountIn)\\n        external\\n        returns (uint256 amountOut)\\n    {\\n        // Multiple pool swaps are encoded through bytes called a `path`. A path is a sequence of token addresses and poolFees that define the pools used in the swaps.\\n        // The format for pool encoding is (tokenIn, fee, tokenOut/tokenIn, fee, tokenOut) where tokenIn/tokenOut parameter is the shared token across the pools.\\n        // Since we are swapping tokenA to WETH and then WETH to tokenB the path encoding is (tokenA, fee, WETH, fee, tokenB).\\n        ISwapRouter.ExactInputParams memory params = ISwapRouter\\n            .ExactInputParams({\\n                path: abi.encodePacked(tokenA, poolFee, WETH, poolFee, tokenB),\\n                recipient: msg.sender,\\n                deadline: block.timestamp,\\n                amountIn: amountIn,\\n                amountOutMinimum: 0\\n            });\\n\\n        // Executes the swap.\\n        amountOut = swapRouter.exactInput(params);\\n    }\\n\\n    /// @notice swapExactOutputMultihop swaps a minimum possible amount of tokenA for a fixed amount of WETH through an intermediary pool.\\n    /// For this example, we want to swap tokenA for tokenB through a WETH pool but we specify the desired amountOut of tokenB. Notice how the path encoding is slightly different for exact output swaps.\\n    /// @dev The calling address must approve this contract to spend its tokenA for this function to succeed. As the amount of input tokenA is variable,\\n    /// the calling address will need to approve for a slightly higher amount, anticipating some variance.\\n    /// @param amountOut The desired amount of tokenB.\\n    /// @param amountInMaximum The maximum amount of tokenA willing to be swapped for the specified amountOut of tokenB.\\n    /// @return amountIn The amountIn of tokenA actually spent to receive the desired amountOut.\\n    function swapExactOutputMultihop(uint256 amountOut, uint256 amountInMaximum)\\n        external\\n        returns (uint256 amountIn)\\n    {\\n        // The parameter path is encoded as (tokenOut, fee, tokenIn/tokenOut, fee, tokenIn)\\n        // The tokenIn/tokenOut field is the shared token between the two pools used in the multiple pool swap. In this case, USDC is the \\\"shared\\\" token.\\n        // For an exactOutput swap, the first swap that occurs is the swap that returns the eventually desired token.\\n        // In this case, our desired output token is tokenB so that swap happens first, and is encoded in the path accordingly.\\n        ISwapRouter.ExactOutputParams memory params = ISwapRouter\\n            .ExactOutputParams({\\n                path: abi.encodePacked(tokenB, poolFee, WETH, poolFee, tokenA),\\n                recipient: msg.sender,\\n                deadline: block.timestamp,\\n                amountOut: amountOut,\\n                amountInMaximum: amountInMaximum\\n            });\\n\\n        // Executes the swap, returning the amountIn actually spent.\\n        amountIn = swapRouter.exactOutput(params);\\n\\n        // If the swap did not require the full amountInMaximum to achieve the exact amountOut then we refund msg.sender and approve the router to spend 0.\\n        if (amountIn < amountInMaximum) {\\n            TransferHelper.safeApprove(tokenA, address(swapRouter), 0);\\n            TransferHelper.safeTransferFrom(\\n                tokenA,\\n                address(this),\\n                msg.sender,\\n                amountInMaximum - amountIn\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x318fedbe5e6d667f683f4b1f31472374b136738ee06a7ba1c6a219cf0509c3cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"./IUniswapV3SwapCallback.sol\\\";\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x66451601aedc80d0b6c06886f0e413a7bd84ae3939052734516abbb87c31efa4\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(\\n                IERC20.transferFrom.selector,\\n                from,\\n                to,\\n                value\\n            )\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"STF\\\"\\n        );\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"ST\\\"\\n        );\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"SA\\\"\\n        );\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"STE\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xc379f687eca663c026ae19fe139f49333f3043ca932f48b5ae7383864a84dbce\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610d8c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806373bd43ad1161008c578063c4b69a1811610066578063c4b69a18146101a8578063d65014c3146101bb578063ea317326146101ce578063edd83557146101e1576100ea565b806373bd43ad14610185578063ad5c464814610198578063c31c9c07146101a0576100ea565b80630fc63d10116100c85780630fc63d10146101355780633b85cf6a1461014a578063412736571461016a5780635f64b55b1461017d576100ea565b806305858d42146100ef578063089fe6aa146101045780630a316a7c14610122575b600080fd5b6101026100fd366004610b6b565b6101f4565b005b61010c61020e565b6040516101199190610d3d565b60405180910390f35b610102610130366004610b0f565b610220565b61013d61027b565b6040516101199190610d01565b61015d610158366004610b9b565b61028a565b6040516101199190610d4d565b610102610178366004610af5565b6103cd565b61013d6103ef565b61015d610193366004610b6b565b6103fe565b61013d6104da565b61013d6104e9565b61015d6101b6366004610b9b565b6104f8565b6101026101c9366004610b6b565b61060f565b6101026101dc366004610b6b565b610627565b61015d6101ef366004610b6b565b610644565b60015461020b906001600160a01b031630836106ec565b50565b600354600160a01b900462ffffff1681565b600180546001600160a01b039586166001600160a01b03199182161790915560028054948616948216949094179093556003805462ffffff909216600160a01b0262ffffff60a01b1993909516919093161716919091179055565b6001546001600160a01b031681565b6040805160a081019091526002546003546001546000938493909283926102d4926001600160a01b039081169262ffffff600160a01b820416929082169183911660c08701610caf565b60408051601f1981840301815291815290825233602083015242828201526060820187905260809091018590526000549051631e51809360e31b81529192506001600160a01b03169063f28c049890610331908490600401610d15565b602060405180830381600087803b15801561034b57600080fd5b505af115801561035f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103839190610b83565b9150828210156103c657600154600080546103ac926001600160a01b03908116929116906106ec565b6001546103c6906001600160a01b0316303385870361083a565b5092915050565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031681565b60408051610100810182526001546001600160a01b03908116825260025481166020830152600354600160a01b900462ffffff168284015233606083015242608083015260a08201849052600060c0830181905260e083018190528054935163414bf38960e01b815290939091169063414bf38990610481908490600401610d28565b602060405180830381600087803b15801561049b57600080fd5b505af11580156104af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d39190610b83565b9392505050565b6003546001600160a01b031681565b6000546001600160a01b031681565b60408051610100810182526001546001600160a01b03908116825260025481166020830152600354600160a01b900462ffffff168284015233606083015242608083015260a0820185905260c08201849052600060e0830181905280549351631b67c43360e31b815290939091169063db3e21989061057b908490600401610d28565b602060405180830381600087803b15801561059557600080fd5b505af11580156105a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cd9190610b83565b9150828210156103c657600154600080546105f6926001600160a01b03908116929116906106ec565b6001546103c6906001600160a01b031633848603610992565b60015461020b906001600160a01b031633308461083a565b60015460005461020b916001600160a01b039081169116836106ec565b6040805160a0810190915260015460035460025460009384939092839261068e926001600160a01b039081169262ffffff600160a01b820416929082169183911660c08701610caf565b60408051601f19818403018152918152908252336020830152428282015260608201869052600060809092018290529054905163c04b8d5960e01b81529192506001600160a01b03169063c04b8d5990610481908490600401610d15565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1781529251825160009485949389169392918291908083835b602083106107685780518252601f199092019160209182019101610749565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146107ca576040519150601f19603f3d011682016040523d82523d6000602084013e6107cf565b606091505b50915091508180156107fd5750805115806107fd57508080602001905160208110156107fa57600080fd5b50515b610833576040805162461bcd60e51b8152602060048201526002602482015261534160f01b604482015290519081900360640190fd5b5050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b178152925182516000948594938a169392918291908083835b602083106108be5780518252601f19909201916020918201910161089f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610920576040519150601f19603f3d011682016040523d82523d6000602084013e610925565b606091505b5091509150818015610953575080511580610953575080806020019051602081101561095057600080fd5b50515b61098a576040805162461bcd60e51b815260206004820152600360248201526229aa2360e91b604482015290519081900360640190fd5b505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1781529251825160009485949389169392918291908083835b60208310610a0e5780518252601f1990920191602091820191016109ef565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610a70576040519150601f19603f3d011682016040523d82523d6000602084013e610a75565b606091505b5091509150818015610aa3575080511580610aa35750808060200190516020811015610aa057600080fd5b50515b610833576040805162461bcd60e51b815260206004820152600260248201526114d560f21b604482015290519081900360640190fd5b80356001600160a01b0381168114610af057600080fd5b919050565b600060208284031215610b06578081fd5b6104d382610ad9565b60008060008060808587031215610b24578283fd5b610b2d85610ad9565b9350610b3b60208601610ad9565b9250610b4960408601610ad9565b9150606085013562ffffff81168114610b60578182fd5b939692955090935050565b600060208284031215610b7c578081fd5b5035919050565b600060208284031215610b94578081fd5b5051919050565b60008060408385031215610bad578182fd5b50508035926020909101359150565b6001600160a01b03169052565b6000815160a0845280518060a0860152825b81811015610bf857602081840181015160c0888401015201610bdb565b81811115610c09578360c083880101525b5060208401519150610c1e6020860183610bbc565b6040848101519086015260608085015190860152608093840151938501939093525050601f01601f19160160c00190565b80516001600160a01b03908116835260208083015182169084015260408083015162ffffff16908401526060808301518216908401526080808301519084015260a0828101519084015260c0808301519084015260e09182015116910152565b6bffffffffffffffffffffffff19606096871b811682526001600160e81b031960e896871b8116601484015294871b811660178301529290941b909216602b840152921b909116602e82015260420190565b6001600160a01b0391909116815260200190565b6000602082526104d36020830184610bc9565b6101008101610d378284610c4f565b92915050565b62ffffff91909116815260200190565b9081526020019056fea26469706673582212201265270cbbcd6b7018a8c65507625b5ee4f571bebbd55f41fcb4f11711515b2d64736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c806373bd43ad1161008c578063c4b69a1811610066578063c4b69a18146101a8578063d65014c3146101bb578063ea317326146101ce578063edd83557146101e1576100ea565b806373bd43ad14610185578063ad5c464814610198578063c31c9c07146101a0576100ea565b80630fc63d10116100c85780630fc63d10146101355780633b85cf6a1461014a578063412736571461016a5780635f64b55b1461017d576100ea565b806305858d42146100ef578063089fe6aa146101045780630a316a7c14610122575b600080fd5b6101026100fd366004610b6b565b6101f4565b005b61010c61020e565b6040516101199190610d3d565b60405180910390f35b610102610130366004610b0f565b610220565b61013d61027b565b6040516101199190610d01565b61015d610158366004610b9b565b61028a565b6040516101199190610d4d565b610102610178366004610af5565b6103cd565b61013d6103ef565b61015d610193366004610b6b565b6103fe565b61013d6104da565b61013d6104e9565b61015d6101b6366004610b9b565b6104f8565b6101026101c9366004610b6b565b61060f565b6101026101dc366004610b6b565b610627565b61015d6101ef366004610b6b565b610644565b60015461020b906001600160a01b031630836106ec565b50565b600354600160a01b900462ffffff1681565b600180546001600160a01b039586166001600160a01b03199182161790915560028054948616948216949094179093556003805462ffffff909216600160a01b0262ffffff60a01b1993909516919093161716919091179055565b6001546001600160a01b031681565b6040805160a081019091526002546003546001546000938493909283926102d4926001600160a01b039081169262ffffff600160a01b820416929082169183911660c08701610caf565b60408051601f1981840301815291815290825233602083015242828201526060820187905260809091018590526000549051631e51809360e31b81529192506001600160a01b03169063f28c049890610331908490600401610d15565b602060405180830381600087803b15801561034b57600080fd5b505af115801561035f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103839190610b83565b9150828210156103c657600154600080546103ac926001600160a01b03908116929116906106ec565b6001546103c6906001600160a01b0316303385870361083a565b5092915050565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031681565b60408051610100810182526001546001600160a01b03908116825260025481166020830152600354600160a01b900462ffffff168284015233606083015242608083015260a08201849052600060c0830181905260e083018190528054935163414bf38960e01b815290939091169063414bf38990610481908490600401610d28565b602060405180830381600087803b15801561049b57600080fd5b505af11580156104af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d39190610b83565b9392505050565b6003546001600160a01b031681565b6000546001600160a01b031681565b60408051610100810182526001546001600160a01b03908116825260025481166020830152600354600160a01b900462ffffff168284015233606083015242608083015260a0820185905260c08201849052600060e0830181905280549351631b67c43360e31b815290939091169063db3e21989061057b908490600401610d28565b602060405180830381600087803b15801561059557600080fd5b505af11580156105a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cd9190610b83565b9150828210156103c657600154600080546105f6926001600160a01b03908116929116906106ec565b6001546103c6906001600160a01b031633848603610992565b60015461020b906001600160a01b031633308461083a565b60015460005461020b916001600160a01b039081169116836106ec565b6040805160a0810190915260015460035460025460009384939092839261068e926001600160a01b039081169262ffffff600160a01b820416929082169183911660c08701610caf565b60408051601f19818403018152918152908252336020830152428282015260608201869052600060809092018290529054905163c04b8d5960e01b81529192506001600160a01b03169063c04b8d5990610481908490600401610d15565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1781529251825160009485949389169392918291908083835b602083106107685780518252601f199092019160209182019101610749565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146107ca576040519150601f19603f3d011682016040523d82523d6000602084013e6107cf565b606091505b50915091508180156107fd5750805115806107fd57508080602001905160208110156107fa57600080fd5b50515b610833576040805162461bcd60e51b8152602060048201526002602482015261534160f01b604482015290519081900360640190fd5b5050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b178152925182516000948594938a169392918291908083835b602083106108be5780518252601f19909201916020918201910161089f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610920576040519150601f19603f3d011682016040523d82523d6000602084013e610925565b606091505b5091509150818015610953575080511580610953575080806020019051602081101561095057600080fd5b50515b61098a576040805162461bcd60e51b815260206004820152600360248201526229aa2360e91b604482015290519081900360640190fd5b505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1781529251825160009485949389169392918291908083835b60208310610a0e5780518252601f1990920191602091820191016109ef565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610a70576040519150601f19603f3d011682016040523d82523d6000602084013e610a75565b606091505b5091509150818015610aa3575080511580610aa35750808060200190516020811015610aa057600080fd5b50515b610833576040805162461bcd60e51b815260206004820152600260248201526114d560f21b604482015290519081900360640190fd5b80356001600160a01b0381168114610af057600080fd5b919050565b600060208284031215610b06578081fd5b6104d382610ad9565b60008060008060808587031215610b24578283fd5b610b2d85610ad9565b9350610b3b60208601610ad9565b9250610b4960408601610ad9565b9150606085013562ffffff81168114610b60578182fd5b939692955090935050565b600060208284031215610b7c578081fd5b5035919050565b600060208284031215610b94578081fd5b5051919050565b60008060408385031215610bad578182fd5b50508035926020909101359150565b6001600160a01b03169052565b6000815160a0845280518060a0860152825b81811015610bf857602081840181015160c0888401015201610bdb565b81811115610c09578360c083880101525b5060208401519150610c1e6020860183610bbc565b6040848101519086015260608085015190860152608093840151938501939093525050601f01601f19160160c00190565b80516001600160a01b03908116835260208083015182169084015260408083015162ffffff16908401526060808301518216908401526080808301519084015260a0828101519084015260c0808301519084015260e09182015116910152565b6bffffffffffffffffffffffff19606096871b811682526001600160e81b031960e896871b8116601484015294871b811660178301529290941b909216602b840152921b909116602e82015260420190565b6001600160a01b0391909116815260200190565b6000602082526104d36020830184610bc9565b6101008101610d378284610c4f565b92915050565b62ffffff91909116815260200190565b9081526020019056fea26469706673582212201265270cbbcd6b7018a8c65507625b5ee4f571bebbd55f41fcb4f11711515b2d64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "swapExactInputMultihop(uint256)": {
        "details": "The calling address must approve this contract to spend at least `amountIn` worth of its tokenA for this function to succeed.",
        "params": {
          "amountIn": "The amount of tokenA to be swapped."
        },
        "returns": {
          "amountOut": "The amount of tokenB received after the swap."
        }
      },
      "swapExactInputSingle(uint256)": {
        "details": "The calling address must approve this contract to spend at least `amountIn` worth of its tokenA for this function to succeed.",
        "params": {
          "amountIn": "The exact amount of tokenA that will be swapped for WETH9."
        },
        "returns": {
          "amountOut": "The amount of tokenB received."
        }
      },
      "swapExactOutputMultihop(uint256,uint256)": {
        "details": "The calling address must approve this contract to spend its tokenA for this function to succeed. As the amount of input tokenA is variable, the calling address will need to approve for a slightly higher amount, anticipating some variance.",
        "params": {
          "amountInMaximum": "The maximum amount of tokenA willing to be swapped for the specified amountOut of tokenB.",
          "amountOut": "The desired amount of tokenB."
        },
        "returns": {
          "amountIn": "The amountIn of tokenA actually spent to receive the desired amountOut."
        }
      },
      "swapExactOutputSingle(uint256,uint256)": {
        "details": "The calling address must approve this contract to spend its tokenA for this function to succeed. As the amount of input tokenA is variable, the calling address will need to approve for a slightly higher amount, anticipating some variance.",
        "params": {
          "amountInMaximum": "The amount of tokenA we are willing to spend to receive the specified amount of tokenB.",
          "amountOut": "The exact amount of tokenB to receive from the swap."
        },
        "returns": {
          "amountIn": "The amount of tokenA actually spent in the swap."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "swapExactInputMultihop(uint256)": {
        "notice": "swapInputMultiplePools swaps a fixed amount of tokenA for a maximum possible amount of tokenB through an intermediary pool. For this example, we will swap tokenA to WETH, then WETH to tokenB to achieve our desired output."
      },
      "swapExactInputSingle(uint256)": {
        "notice": "swapExactInputSingle swaps a fixed amount of tokenA for a maximum possible amount of tokenB using the tokenA/tokenB fee pool by calling `exactInputSingle` in the swap router."
      },
      "swapExactOutputMultihop(uint256,uint256)": {
        "notice": "swapExactOutputMultihop swaps a minimum possible amount of tokenA for a fixed amount of WETH through an intermediary pool. For this example, we want to swap tokenA for tokenB through a WETH pool but we specify the desired amountOut of tokenB. Notice how the path encoding is slightly different for exact output swaps."
      },
      "swapExactOutputSingle(uint256,uint256)": {
        "notice": "swapExactOutputSingle swaps a minimum possible amount of tokenA for a fixed amount of tokenB."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2366,
        "contract": "contracts/SwapExamples.sol:SwapExamples",
        "label": "swapRouter",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ISwapRouter)3149"
      },
      {
        "astId": 2368,
        "contract": "contracts/SwapExamples.sol:SwapExamples",
        "label": "tokenA",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2370,
        "contract": "contracts/SwapExamples.sol:SwapExamples",
        "label": "tokenB",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2372,
        "contract": "contracts/SwapExamples.sol:SwapExamples",
        "label": "WETH",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2374,
        "contract": "contracts/SwapExamples.sol:SwapExamples",
        "label": "poolFee",
        "offset": 20,
        "slot": "3",
        "type": "t_uint24"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapRouter)3149": {
        "encoding": "inplace",
        "label": "contract ISwapRouter",
        "numberOfBytes": "20"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      }
    }
  }
}